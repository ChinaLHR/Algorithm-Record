package io.github.chinalhr.leetcode.dynamic_programming;

/**
 * @Author: lihanrong
 * @Date: 2020/9/27 5:30 下午
 * @Description: 题目：322. 零钱兑换 medium
 * 给定不同面额的硬币 coins 和一个总金额 amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回 -1。
 * 示例 1:
 * <p>
 * 输入: coins = [1, 2, 5], amount = 11
 * 输出: 3
 * 解释: 11 = 5 + 5 + 1
 * <p>
 * 实现：
 * 1. 确定 base case，目标金额 amount 为 0 时算法返回 0。
 * 2. 确定「状态」- 原问题和子问题中会变化的变量。由于硬币数量无限，硬币的面额也是不确定的，只有目标金额会不断地向 base case 靠近，
 * 所以唯一的「状态」就是目标金额 amount
 * 3. 确定「选择」，也就是导致「状态」产生变化的行为。目标金额变化的原因在于你在选择硬币，你每选择一枚硬币，就相当于减少了目标金额。
 *  所以说所有硬币的面值，就是你的「选择」。
 * 4. 明确 dp 函数/数组的定义。会有一个递归的 dp 函数，一般来说函数的参数就是状态转移中会变化的量，也就是上面说到的「状态」；
 *  函数的返回值就是题目要求我们计算的量。就本题来说，状态只有一个，即「目标金额」，题目要求我们计算凑出目标金额所需的最少硬币数量。
 *  所以我们可以这样定义 dp 函数：输入一个目标金额 n，返回凑出目标金额 n 的最少硬币数量。
 */
public class CoinChange {

//    public int coinChange(int[] coins, int amount) {
//
//    }
}
